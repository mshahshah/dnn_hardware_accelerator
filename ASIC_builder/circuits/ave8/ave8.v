// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ave8_ave8,hls_ip_2020_1_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.296000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14,HLS_SYN_LUT=120,HLS_VERSION=2020_1_1}" *)

module ave8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1,
        buffer_r_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] buffer_r_q0;
output  [2:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [31:0] buffer_r_d1;
input  [31:0] buffer_r_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[31:0] buffer_r_d0;
reg[2:0] buffer_r_address1;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] buffer_addr_1_reg_130;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln29_fu_108_p2;
reg   [0:0] icmp_ln29_reg_136;
wire   [2:0] add_ln29_fu_114_p2;
reg   [2:0] add_ln29_reg_140;
reg   [2:0] phi_ln29_reg_85;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln30_fu_103_p1;
wire   [63:0] zext_ln30_2_fu_120_p1;
wire   [63:0] zext_ln30_1_fu_125_p1;
wire    ap_CS_fsm_state4;
wire   [2:0] add_ln30_fu_97_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln29_reg_85 <= 3'd7;
    end else if (((icmp_ln29_reg_136 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln29_reg_85 <= add_ln29_reg_140;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln29_reg_140 <= add_ln29_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_addr_1_reg_130 <= zext_ln30_fu_103_p1;
        icmp_ln29_reg_136 <= icmp_ln29_fu_108_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_address0 = buffer_addr_1_reg_130;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_r_address0 = zext_ln30_2_fu_120_p1;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_address1 = zext_ln30_1_fu_125_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_r_address1 = zext_ln30_fu_103_p1;
    end else begin
        buffer_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_d0 = buffer_r_q0;
    end else begin
        buffer_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln29_reg_136 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln29_reg_136 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_114_p2 = ($signed(phi_ln29_reg_85) + $signed(3'd6));

assign add_ln30_fu_97_p2 = ($signed(phi_ln29_reg_85) + $signed(3'd7));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = 32'd0;

assign buffer_r_d1 = buffer_r_q1;

assign icmp_ln29_fu_108_p2 = ((phi_ln29_reg_85 == 3'd1) ? 1'b1 : 1'b0);

assign zext_ln30_1_fu_125_p1 = phi_ln29_reg_85;

assign zext_ln30_2_fu_120_p1 = add_ln29_fu_114_p2;

assign zext_ln30_fu_103_p1 = add_ln30_fu_97_p2;

endmodule //ave8
